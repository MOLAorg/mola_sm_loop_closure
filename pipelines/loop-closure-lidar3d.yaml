# ---------------------------------------------------------------------------
# Proprietary Software License
# 
# Copyright (c) 2018-2024 Jose Luis Blanco-Claraco, University of Almeria.
# All rights reserved.
#
# This file is part of MOLA (Modular Optimization framework
# for Localization and mApping)
#
# Unauthorized copying, distribution, modification, or use of this file,
# via any medium, is strictly prohibited without the prior written permission
# of University of Almer√≠a (PI: Jose Luis Blanco-Claraco).
#
# License:
# You may use this file in accordance with the terms and conditions
# set forth in the Proprietary Software License, which is included
# with this software or can be obtained at [Your Company Website].
#
# Disclaimer:
# This software is provided "as is," without warranty of any kind,
# express or implied, including but not limited to the warranties
# of merchantability, fitness for a particular purpose, and noninfringement.
# In no event shall the authors or copyright holders be liable
# for any claim, damages, or other liability, whether in an action
# of contract, tort, or otherwise, arising from, out of, or in connection
# with the software or the use or other dealings in the software.
# ---------------------------------------------------------------------------

# This file holds parameters for mola_sm_loop_closure

params:
  # These sensor labels will be handled as LIDAR observations:
  # Can be overriden with cli flag --lidar-sensor-label
  lidar_sensor_labels: ['${MOLA_LIDAR_NAME|lidar}', '/ouster/points']

  # These sensor labels will be handled as IMU observations:
  imu_sensor_label: 'imu'

  # These sensor labels will be handled as wheel odometry observation (C++11 regex):
  wheel_odometry_sensor_label: 'odometry|ODOMETRY'

  # These sensor labels will be handled as GNSS (GPS) (For storage in simplemap only)
  gnss_sensor_label: 'gps'

  submap_max_length_wrt_map: '${SUBMAP_MAX_RELATIVE_LENGTH|0.125}'   # [m/m]
  submap_max_absolute_length: '${SUBMAP_MAX_ABS_LENGTH|300}'  # [m]
  submap_min_absolute_length: '${SUBMAP_MIN_ABS_LENGTH|60}'  # [m]

  max_time_between_kfs_to_break_submap: '${MAX_TIME_BETWEEN_KFS_TO_BREAK_SUBMAP|10.0}' # [s]

  max_number_lc_candidates: '${MAX_NUMBER_LC|250}'   # 0: no limit
  max_number_lc_candidates_per_submap: '${MAX_LC_PER_SUBMAP|2}'

  largest_delta_for_reconsider_all: 10.0 # [m]

  use_gnss: '${USE_GNSS|true}'
  
  assume_planar_world: false

  # Minimum ICP quality to accept a loop closure:
  min_icp_goodness: 0.55
  icp_edge_worst_multiplier: 3.0  # how much uncertainty for the "min_icp_goodness" in comparison to a 100% icp result
  icp_edge_robust_param: 10.0

  input_edges_uncertainty_multiplier: 1.0

  min_volume_intersection_ratio_for_lc_candidate: 0.20
  
  do_first_gross_relocalize: false
  do_montecarlo_icp: '${DO_MONTECARLO_ICP|false}'


  # Profiler:
  profiler_enabled: true
  
  threshold_sigma_initial: 'min(10.0, max(0.50, REL_POSE_SIGMA_XY))'
  threshold_sigma_final: 'max(0.50, min(0.50, REL_POSE_SIGMA_XY))'
  
  max_sensor_range: 100


# ICP parameters for a regular time step:
icp_settings:
  # mp2p_icp ICP pipeline configuration file, for use in ICP 
  # odometry and SLAM packages.
  #
  # YAML configuration file for use with the CLI tool mp2p-icp-run or
  # programmatically from function mp2p_icp::icp_pipeline_from_yaml()
  #
  class_name: mp2p_icp::ICP

  # See: mp2p_icp::Parameter
  params:
    maxIterations: 800
    minAbsStep_trans: 1e-4
    minAbsStep_rot: 5e-5

    quality_checkpoints:
      - iteration: 150
        minimum_quality: 0.03

    #debugPrintIterationProgress: true  # Print iteration progress
    #generateDebugFiles: true  # Can be override with env var "MP2P_ICP_GENERATE_DEBUG_FILES=1"
    saveIterationDetails: true # Store partial solutions and pairings for each ICP iteration
    decimationIterationDetails: 3
    debugFileNameFormat: "${HOME}/ros2_ws/icp-logs/lc-$UNIQUE_ID-local_$LOCAL_ID$LOCAL_LABEL-to-global_$GLOBAL_ID$GLOBAL_LABEL.icplog"
    decimationDebugFiles: ${MP2P_ICP_LOG_FILES_DECIMATION|1}

  solvers:
    - class: mp2p_icp::Solver_GaussNewton
      params:
        maxIterations: 2
        robustKernel: 'RobustKernel::GemanMcClure'
        robustKernelParam: '0.5*max(SIGMA_FINAL, SIGMA_INIT-(SIGMA_INIT-SIGMA_FINAL)*ICP_ITERATION/300)'  # [m]  # (adaptive)
        #innerLoopVerbose: true

  # Sequence of one or more pairs (class, params) defining mp2p_icp::Matcher
  # instances to pair geometric entities between pointclouds.
  matchers:
    - class: mp2p_icp::Matcher_Points_DistanceThreshold
      params:
        threshold: '2.0*max(SIGMA_FINAL, SIGMA_INIT-(SIGMA_INIT-SIGMA_FINAL)*ICP_ITERATION/300)'   # [m]
        thresholdAngularDeg: 0  # deg
        pairingsPerPoint: 1
        allowMatchAlreadyMatchedGlobalPoints: true # faster
        pointLayerMatches:
          - {global: "localmap_up", local: "points_to_register_up", weight: 1.0}
          - {global: "localmap_down", local: "points_to_register_down", weight: 1.0}


  quality:
    - class: mp2p_icp::QualityEvaluator_Voxels
      weight: 0.5
      params:
        voxel_layer_name: 'localmap_voxels'
        dist2quality_scale: 1.0 # default

    - class: mp2p_icp::QualityEvaluator_PairedRatio
      weight: 0.5
      params:
        absolute_minimum_pairing_ratio: 0.10
        reuse_icp_pairings: false
        threshold: '2*2.0*SIGMA_FINAL'   # [m]
        thresholdAngularDeg: 0  # deg
        pairingsPerPoint: 1
        allowMatchAlreadyMatchedGlobalPoints: true # faster
        pointLayerMatches:
          - {global: "localmap_up", local: "points_to_register_up", weight: 1.0}
#          # do NOT count DOWN points
#          #- {global: "localmap_down", local: "points_to_register_down", weight: 1.0}

# Local map updates:
# Very first observation: Use the mp2p_icp pipeline generator to create the local map:
localmap_generator:
  # Generators:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # incoming raw CObservation objects.
  #
  - class_name: mp2p_icp_filters::Generator
    params:
      target_layer: 'localmap_up'
      throw_on_unhandled_observation_class: true
      process_class_names_regex: ''  # NONE: don't process observations in the generator.
      #process_sensor_labels_regex: '.*'
      # metric_map_definition_ini_file: '${CURRENT_YAML_FILE_PATH}/localmap_definition_voxelmap.ini'
      
      metric_map_definition:
        # Any class derived from mrpt::maps::CMetricMap https://docs.mrpt.org/reference/latest/group_mrpt_maps_grp.html
        class: mrpt::maps::CSimplePointsMap
        #class: mola::HashedVoxelPointCloud
        #plugin: 'libmola_metric_maps.so' # Import additional custom user-defined map classes (search in LD_LIBRARY_PATH)
        creationOpts: ~
        insertOpts: ~
        likelihoodOpts: ~

  - class_name: mp2p_icp_filters::Generator
    params:
      target_layer: 'localmap_down'
      throw_on_unhandled_observation_class: true
      process_class_names_regex: ''  # NONE: don't process observations in the generator.
      #process_sensor_labels_regex: '.*'
      # metric_map_definition_ini_file: '${CURRENT_YAML_FILE_PATH}/localmap_definition_voxelmap.ini'
      
      metric_map_definition:
        # Any class derived from mrpt::maps::CMetricMap https://docs.mrpt.org/reference/latest/group_mrpt_maps_grp.html
        class: mrpt::maps::CSimplePointsMap
        #class: mola::HashedVoxelPointCloud
        #plugin: 'libmola_metric_maps.so' # Import additional custom user-defined map classes (search in LD_LIBRARY_PATH)
        creationOpts: ~
        insertOpts: ~
        likelihoodOpts: ~


  - class_name: mp2p_icp_filters::Generator
    params:
      target_layer: 'localmap_voxels'
      throw_on_unhandled_observation_class: true
      process_class_names_regex: ''  # NONE: don't process observations in the generator.
      #process_sensor_labels_regex: '.*'
      # metric_map_definition_ini_file: '${CURRENT_YAML_FILE_PATH}/localmap_definition_voxelmap.ini'
      
      metric_map_definition:
        # Any class derived from mrpt::maps::CMetricMap https://docs.mrpt.org/reference/latest/group_mrpt_maps_grp.html
        class: mrpt::maps::CVoxelMap
        #plugin: 'libmola_metric_maps.so' # Import additional custom user-defined map classes (search in LD_LIBRARY_PATH)
        creationOpts:
          resolution: 1.5 # [m]
          #resolution: $f{0.05*MAX_SENSOR_RANGE} # [m]  # You can also use formulas in any numeric field
        #insertionOpts:
        # none required for this class
        likelihoodOpts:
          decimation: 1
          occupiedThreshold: 0.60
        renderOpts:
          occupiedThreshold: 0.60
          freeThreshold: 0.40
          generateFreeVoxels: false


# ---------------------------------------------------------------------------------
# LIDAR observations are, first, loaded using a generator
# from "observations_generator".
# then, optionally, filtered before being registered with ICP
# against the local map with filter "observations_filter".
# ---------------------------------------------------------------------------------
observations_generator:
  # Generators:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # incoming raw CObservation objects.
  #
  - class_name: mp2p_icp_filters::Generator
    params:
      target_layer: 'raw'
      throw_on_unhandled_observation_class: true
      process_class_names_regex: '(mrpt::obs::CObservationPointCloud|mrpt::obs::CObservation2DRangeScan|mrpt::obs::CObservationVelodyneScan)'
      process_sensor_labels_regex: '.*'

observations_filter:
  # Filters:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # input metric_map_t object.
  #
  - class_name: mp2p_icp_filters::FilterDeskew
    params:
      input_pointcloud_layer: 'raw'
      output_pointcloud_layer: 'deskewed'
      silently_ignore_no_timestamps: true # To handle more dataset types
      output_layer_class: 'mrpt::maps::CPointsMapXYZIRT'  # Keep intensity & ring channels
      
      # These (vx,...wz) are variable names that must be defined via the
      # mp2p_icp::Parameterizable API to update them dynamically.
      twist: [VX,VY,VZ,WX,WY,WZ]

  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'deskewed'
      output_pointcloud_layer: 'decimated_for_map_raw'
      voxel_filter_resolution: 0.70*1e-2*ESTIMATED_SENSOR_MAX_RANGE  # [m]
      decimate_method: DecimateMethod::FirstPoint
      #decimate_method: DecimateMethod::ClosestToAverage

  # Remove points too close, to prevent "noise" from the vehicle, 
  # the person next to the robot, etc. Remove too distant points since
  # the tiniest angular error projects to a large translational error.
  - class_name: mp2p_icp_filters::FilterByRange
    params:
      input_pointcloud_layer: 'decimated_for_map_raw'
      output_layer_between: 'decimated_for_map_by_range'
      range_min: max(1.0, 0.03*ESTIMATED_SENSOR_MAX_RANGE)
      range_max: 1.2*ESTIMATED_SENSOR_MAX_RANGE

  # Remove close ceilings (problematic in most cases!)
  - class_name: mp2p_icp_filters::FilterBoundingBox
    params:
      input_pointcloud_layer: 'decimated_for_map_by_range'
      outside_pointcloud_layer: 'decimated_for_map'
      bounding_box_min: [ -0.20*ESTIMATED_SENSOR_MAX_RANGE, -0.20*ESTIMATED_SENSOR_MAX_RANGE, 0.01*ESTIMATED_SENSOR_MAX_RANGE ]
      bounding_box_max: [  0.20*ESTIMATED_SENSOR_MAX_RANGE,  0.20*ESTIMATED_SENSOR_MAX_RANGE, 0.10*ESTIMATED_SENSOR_MAX_RANGE ]

  # Split up-down:
  - class_name: mp2p_icp_filters::FilterBoundingBox
    params:
      input_pointcloud_layer: 'decimated_for_map'
      inside_pointcloud_layer: 'decimated_for_map_down'
      outside_pointcloud_layer: 'decimated_for_map_up'
      bounding_box_min: [ -0.90*ESTIMATED_SENSOR_MAX_RANGE, -0.90*ESTIMATED_SENSOR_MAX_RANGE, -6.0 ]
      bounding_box_max: [  0.90*ESTIMATED_SENSOR_MAX_RANGE,  0.90*ESTIMATED_SENSOR_MAX_RANGE, +0.2 ]


  # Remove layers to save memory and log file storage
  - class_name: mp2p_icp_filters::FilterDeleteLayer
    params:
      pointcloud_layer_to_remove: ['raw','deskewed', 'decimated_for_map', 'decimated_for_map_raw']

# To populate the local map, one or more observation layers are merged
# into the local map via this pipeline:
insert_observation_into_local_map:
  - class_name: mp2p_icp_filters::FilterMerge
    params:
      input_pointcloud_layer: 'decimated_for_map_down'
      target_layer: 'localmap_down'
      input_layer_in_local_coordinates: true
      robot_pose: [ROBOT_X, ROBOT_Y, ROBOT_Z, ROBOT_YAW, ROBOT_PITCH, ROBOT_ROLL]

  - class_name: mp2p_icp_filters::FilterMerge
    params:
      input_pointcloud_layer: 'decimated_for_map_up'
      target_layer: 'localmap_up'
      input_layer_in_local_coordinates: true
      robot_pose: [ROBOT_X, ROBOT_Y, ROBOT_Z, ROBOT_YAW, ROBOT_PITCH, ROBOT_ROLL]

  - class_name: mp2p_icp_filters::FilterMerge
    params:
      input_pointcloud_layer: 'decimated_for_map_by_range'
      target_layer: 'localmap_voxels'
      input_layer_in_local_coordinates: true
      robot_pose: [robot_x, robot_y, robot_z, robot_yaw, robot_pitch, robot_roll]


submap_final_filter:
  # Filters:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # input metric_map_t object.
  #
  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'localmap_up'
      output_pointcloud_layer: 'minimap_viz'
      voxel_filter_resolution: 3.5
      decimate_method: DecimateMethod::FirstPoint
  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'localmap_down'
      output_pointcloud_layer: 'minimap_viz'
      voxel_filter_resolution: 3.5
      decimate_method: DecimateMethod::FirstPoint

  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'localmap_up'
      output_pointcloud_layer: 'points_to_register_up'
      voxel_filter_resolution: 1.5
      decimate_method: DecimateMethod::FirstPoint
  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'localmap_down'
      output_pointcloud_layer: 'points_to_register_down'
      voxel_filter_resolution: 3.0
      decimate_method: DecimateMethod::FirstPoint

