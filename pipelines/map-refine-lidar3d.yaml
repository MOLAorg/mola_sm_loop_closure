# This file holds parameters for mola_sm_loop_closure

params:
  # These sensor labels will be handled as LIDAR observations:
  # Can be overriden with cli flag --lidar-sensor-label
  lidar_sensor_labels: ['${MOLA_LIDAR_NAME|lidar}', '/ouster/points']

  # These sensor labels will be handled as IMU observations:
  imu_sensor_label: 'imu'

  # These sensor labels will be handled as wheel odometry observation (C++11 regex):
  wheel_odometry_sensor_label: 'odometry|ODOMETRY'

  # These sensor labels will be handled as GNNS (GPS) (For storage in simplemap only)
  gnns_sensor_label: 'gps'

  submap_max_length_wrt_map: 0.01 #'${SUBMAP_MAX_RELATIVE_LENGTH|0.1}'   # [m/m]

  max_number_lc_candidates: 0  # 0: no limit
  max_number_lc_candidates_per_submap: '${MAX_LC_PER_SUBMAP|2}'

  use_gnns: false
  
  assume_planar_world: false

  # Minimum ICP quality to accept a loop closure:
  min_icp_goodness: 0.50
  icp_edge_worst_multiplier: 1.5  # how much uncertainty for the "min_icp_goodness" in comparison to a 100% icp result
  icp_edge_robust_param: 2.0

  min_lc_uncertainty_ratio_to_draw_several_samples: 1e8

  min_volume_intersection_ratio_for_lc_candidate: 0.70
  
  do_first_gross_relocalize: false
  do_montecarlo_icp: false

  # Profiler:
  profiler_enabled: true
  
  threshold_sigma_initial: 1.0
  threshold_sigma_final: 0.5

  max_sensor_range: 100


# ICP parameters for a regular time step:
icp_settings:
  # mp2p_icp ICP pipeline configuration file, for use in ICP 
  # odometry and SLAM packages.
  #
  # YAML configuration file for use with the CLI tool mp2p-icp-run or
  # programmatically from function mp2p_icp::icp_pipeline_from_yaml()
  #
  class_name: mp2p_icp::ICP

  # See: mp2p_icp::Parameter
  params:
    maxIterations: 800
    minAbsStep_trans: 1e-4
    minAbsStep_rot: 5e-5

    #debugPrintIterationProgress: true  # Print iteration progress
    #generateDebugFiles: true  # Can be override with env var "MP2P_ICP_GENERATE_DEBUG_FILES=1"
    saveIterationDetails: true # Store partial solutions and pairings for each ICP iteration
    decimationIterationDetails: 3
    debugFileNameFormat: "${HOME}/ros2_ws/icp-logs/refine-$UNIQUE_ID-local_$LOCAL_ID$LOCAL_LABEL-to-global_$GLOBAL_ID$GLOBAL_LABEL.icplog"
    decimationDebugFiles: ${MP2P_ICP_LOG_FILES_DECIMATION|1}

  solvers:
    - class: mp2p_icp::Solver_GaussNewton
      params:
        maxIterations: 2
        robustKernel: 'RobustKernel::GemanMcClure'
        robustKernelParam: '0.5*max(SIGMA_FINAL, SIGMA_INIT-(SIGMA_INIT-SIGMA_FINAL)*ICP_ITERATION/300)'  # [m]  # (adaptive)
        #innerLoopVerbose: true

  # Sequence of one or more pairs (class, params) defining mp2p_icp::Matcher
  # instances to pair geometric entities between pointclouds.
  matchers:
    - class: mp2p_icp::Matcher_Points_DistanceThreshold
      params:
        threshold: '2.0*max(SIGMA_FINAL, SIGMA_INIT-(SIGMA_INIT-SIGMA_FINAL)*ICP_ITERATION/300)'   # [m]
        thresholdAngularDeg: 0  # deg
        pairingsPerPoint: 1
        allowMatchAlreadyMatchedGlobalPoints: true # faster
        pointLayerMatches:
          - {global: "localmap", local: "points_to_register", weight: 1.0}


  quality:
    - class: mp2p_icp::QualityEvaluator_PairedRatio
      params:
        ~  # none required: reuse

# Local map updates:
# Very first observation: Use the mp2p_icp pipeline generator to create the local map:
localmap_generator:
  # Generators:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # incoming raw CObservation objects.
  #
  - class_name: mp2p_icp_filters::Generator
    params:
      target_layer: 'localmap'
      throw_on_unhandled_observation_class: true
      process_class_names_regex: ''  # NONE: don't process observations in the generator.
      #process_sensor_labels_regex: '.*'
      # metric_map_definition_ini_file: '${CURRENT_YAML_FILE_PATH}/localmap_definition_voxelmap.ini'
      
      metric_map_definition:
        # Any class derived from mrpt::maps::CMetricMap https://docs.mrpt.org/reference/latest/group_mrpt_maps_grp.html
        class: mrpt::maps::CSimplePointsMap
        #class: mola::HashedVoxelPointCloud
        #plugin: 'libmola_metric_maps.so' # Import additional custom user-defined map classes (search in LD_LIBRARY_PATH)
        creationOpts: ~
        insertOpts: ~
        likelihoodOpts: ~

# ---------------------------------------------------------------------------------
# LIDAR observations are, first, loaded using a generator
# from "observations_generator".
# then, optionally, filtered before being registered with ICP
# against the local map with filter "observations_filter".
# ---------------------------------------------------------------------------------
observations_generator:
  # Generators:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # incoming raw CObservation objects.
  #
  - class_name: mp2p_icp_filters::Generator
    params:
      target_layer: 'raw'
      throw_on_unhandled_observation_class: true
      process_class_names_regex: '(mrpt::obs::CObservationPointCloud)'
      process_sensor_labels_regex: '.*'

observations_filter:
  # Filters:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # input metric_map_t object.
  #
  - class_name: mp2p_icp_filters::FilterDeskew
    params:
      input_pointcloud_layer: 'raw'
      output_pointcloud_layer: 'deskewed'
      silently_ignore_no_timestamps: true # To handle more dataset types
      output_layer_class: 'mrpt::maps::CPointsMapXYZIRT'  # Keep intensity & ring channels
      
      # These (vx,...wz) are variable names that must be defined via the
      # mp2p_icp::Parameterizable API to update them dynamically.
      twist: [VX,VY,VZ,WX,WY,WZ]

  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'deskewed'
      output_pointcloud_layer: 'decimated_for_map_raw'
      voxel_filter_resolution: 0.25*1e-2*ESTIMATED_SENSOR_MAX_RANGE  # [m]
      #decimate_method: DecimateMethod::FirstPoint
      decimate_method: DecimateMethod::ClosestToAverage

  # Remove points too close, to prevent "noise" from the vehicle, 
  # the person next to the robot, etc. Remove too distant points since
  # the tiniest angular error projects to a large translational error.
  - class_name: mp2p_icp_filters::FilterByRange
    params:
      input_pointcloud_layer: 'decimated_for_map_raw'
      output_layer_between: 'decimated_for_map'
      range_min: max(1.0, 0.02*ESTIMATED_SENSOR_MAX_RANGE)
      range_max: 1.2*ESTIMATED_SENSOR_MAX_RANGE

  # Remove layers to save memory and log file storage
  - class_name: mp2p_icp_filters::FilterDeleteLayer
    params:
      pointcloud_layer_to_remove: ['raw','deskewed', 'decimated_for_map_raw']

# To populate the local map, one or more observation layers are merged
# into the local map via this pipeline:
insert_observation_into_local_map:
  - class_name: mp2p_icp_filters::FilterMerge
    params:
      input_pointcloud_layer: 'decimated_for_map'
      target_layer: 'localmap'
      input_layer_in_local_coordinates: true
      robot_pose: [ROBOT_X, ROBOT_Y, ROBOT_Z, ROBOT_YAW, ROBOT_PITCH, ROBOT_ROLL]


submap_final_filter:
  # Filters:
  #
  # One filter object will be created for each entry, instancing the given class,
  # and with the given parameters. Filters are run in definition order on the
  # input metric_map_t object.
  #
  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'localmap'
      output_pointcloud_layer: 'minimap_viz'
      voxel_filter_resolution: 3.5
      decimate_method: DecimateMethod::FirstPoint

  - class_name: mp2p_icp_filters::FilterDecimateVoxels
    params:
      input_pointcloud_layer: 'localmap'
      output_pointcloud_layer: 'points_to_register'
      voxel_filter_resolution: 1.5
      decimate_method: DecimateMethod::VoxelAverage

